{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ALIAS_TO_SIGNATURE from './../data/data.json';\n\n\n// MAIN //\n\n/**\n* Returns the signature(s) associated with a specified alias.\n*\n* @param {string} alias - alias\n* @throws {TypeError} must provide a string\n* @returns {(StringArray|null)} signature(s)\n*\n* @example\n* var out = signature( 'base.sin' );\n* // returns [ '...' ]\n*/\nfunction signature( alias ) {\n\tvar out;\n\tvar i;\n\tif ( !isString( alias ) ) {\n\t\tthrow new TypeError( format( '0RP3N', alias ) );\n\t}\n\tout = [];\n\tfor ( i = 0; i < ALIAS_TO_SIGNATURE.length; i++ ) {\n\t\tif ( ALIAS_TO_SIGNATURE[ i ][ 0 ] === alias ) {\n\t\t\tout.push( ALIAS_TO_SIGNATURE[ i ][ 1 ] );\n\t\t}\n\t}\n\treturn ( out.length ) ? out : null;\n}\n\n\n// EXPORTS //\n\nexport default signature;\n"],"names":["signature","alias","out","i","isString","TypeError","format","ALIAS_TO_SIGNATURE","length","push"],"mappings":";;wktSAwCA,SAASA,EAAWC,GACnB,IAAIC,EACAC,EACJ,IAAMC,EAAUH,GACf,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAGvC,IADAC,EAAM,GACAC,EAAI,EAAGA,EAAII,EAAmBC,OAAQL,IACtCI,EAAoBJ,GAAK,KAAQF,GACrCC,EAAIO,KAAMF,EAAoBJ,GAAK,IAGrC,OAASD,EAAe,OAAAA,EAAM,IAC/B"}